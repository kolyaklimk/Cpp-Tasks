//Лабораторная 4, задача 10. Выполнена: Климкович Н. В.

/*Построить магический квадрат любого порядка, используя любой
алгоритм. Выделение памяти через функции языка С.*/

#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int n, q, q1, t1, t, t2, t3, q_, k, v;
    int r, m, q1_, s, s1, s2, s3, d, d1;
    int D, D1, _q1_, _1q1_, d_, d1_, q__, q1__, r1, n1, v1;
    cout << "N = ";
    cin >> n;

    while (n < 3 || cin.fail()) {
        cin.clear();
        cin.ignore(9999, '\n');
        cout << "\nIncorrect value, N = ";
        cin >> n;
    }
    t2 = 1;
    t3 = 1;
    r = n / 2;
    if (n / 4 != 0) v = n;
    if (n % 2 == 0) v = n + n - 2;
    if ((n - 1) % 2 == 0) v = n + 2 * r;

    //двумерный массив
    int** a = (int**)malloc(v * sizeof(int*));
    for (q = 0; q < v; q++)
        a[q] = (int*)malloc(v * sizeof(int));

    //ввод 0 в массив
    for (q = 0; q < v; q++)
        for (q1 = 0; q1 < v; q1++) {
            a[q][q1] = 0;
        }

    // если квадрат 2n + 1
    if ((n - 1) % 2 == 0) {
            m = 1;
            s = 0;
            q1_ = 0;
            q_ = v / 2;

            //ввод значений в массив. Квадрат 45 градусов
            for (q = q_, q1 = q1_; q < v && q >= 0 && q1 < v && q1 >= 0; q--, q1++) {
                a[q][q1] = m;
                s++;
                if (s == n) {
                    s = 0;
                    q1_++;
                    q_++;
                    q = q_ + 1;
                    q1 = q1_ - 1;
                }
                m++;
            }

            //расстояние между значениями в таблице
            t1 = m;
            t = 2;
            while (t1 > 10) {
                t1 /= 10;
                t++;
            }
            if (t2 < t) t2 = t;

            //перемещение значений сверху
            for (q = 0; q < r; q++)
                for (q1 = 0; q1 < v; q1++)
                    if (a[q][q1] != 0)
                        a[q + n][q1] = a[q][q1];

            //перемещение значений снизу
            for (q = n + r; q < v; q++)
                for (q1 = 0; q1 < v; q1++)
                    if (a[q][q1] != 0)
                        a[q - n][q1] = a[q][q1];

            //перемещение значений справа
            for (q = 0; q < v; q++)
                for (q1 = 0; q1 < r; q1++)
                    if (a[q][q1] != 0)
                        a[q][q1 + n] = a[q][q1];

            //перемещение значений слева
            for (q = 0; q < v; q++)
                for (q1 = n + r; q1 < v; q1++)
                    if (a[q][q1] != 0)
                        a[q][q1 - n] = a[q][q1];

            //вывод таблицы 1
            cout << "\n\n";
            for (q = r; q < v - r; q++) {
                for (q1 = r; q1 < v - r; q1++) cout << setw(t2 + 1) << a[q][q1];
                cout << "\n";
            }

            for (q = 0; q < v; q++)
                free(a[q]);
            free(a);

            return 0;
        }

    //если квадрат 4n
    if (n % 4 == 0) {
        m = 1;
        d = (v - n) / 2;
        d1 = (v - n) / 2;
        d_ = (v - n) / 2 +2;
        d1_ = (v - n) / 2+n-1;
        D = n*n;
        _q1_ = (v - n) / 2 + n / 2;
        _1q1_ = (v - n) / 2 + n / 2-1;
       while (D != m - 1) {
            //вверх диагональ
            for (q = d, q1 = d1; q < v && q1 < _q1_; q--, q1++) {
                a[q][q1] = m;
                m++;
                q_ = q;
                q1_ = q1;
            }

            //вниз диагональ
            _q1_ += n / 2;
            for (q = q_, q1 = q1_ + 1; q < v&& q1 < _q1_; q++, q1++) {
                a[q][q1] = m;
                m++;
                q_ = q;
                q1_ = q1;
            }

            //обратно вниз диагональ
            _q1_ -= n / 2 + 1;
            for (q = q_ + 1, q1 = q1_; q < v && q1 > _q1_; q++, q1--) {
                a[q][q1] = m;
                m++;
                q_ = q;
                q1_ = q1;
            }
            
            //обратно вверх диагональ
            _q1_ -= n / 2;
            for (q = q_, q1 = q1_ - 1; q < v && q1 > _q1_; q--, q1--) {
                a[q][q1] = m;
                m++;
                q_ = q;
                q1_ = q1;
            }
            
            _q1_ = (v - n) / 2 + n / 2;
            d += 4;

            //обратно вверх диагональ
            for (q = d_, q1 = d1_; q < v && q1 > _1q1_; q--, q1--) {
                a[q][q1] = m;
                m++;
                q__ = q;
                q1__ = q1;
            }

            //обратно вниз диагональ
            _1q1_ -= n / 2;
            for (q = q__, q1 = q1__ - 1; q < v && q1 > _1q1_; q++, q1--) {
                a[q][q1] = m;
                m++;
                q__ = q;
                q1__ = q1;
            }
            
            //вниз диагональ
            _1q1_ += n / 2 + 1;
            for (q = q__ + 1, q1 = q1__; q < v && q1 < _1q1_; q++, q1++) {
                a[q][q1] = m;
                m++;
                q__ = q;
                q1__ = q1;
            }

            //вверх диагональ
            _1q1_ += n / 2;
            for (q = q__, q1 = q1__ + 1; q < v && q1 < _1q1_; q--, q1++) {
                a[q][q1] = m;
                m++;
                q__ = q;
                q1__ = q1;
            }

            _1q1_ = (v - n) / 2 + n / 2 - 1;
            d_ += 4;
        }

       //перемещение значений сверху
       for (q = 0; q < (v-n)/2; q++)
           for (q1 = 0; q1 < v; q1++)
               if (a[q][q1] != 0)
                   a[q + n][q1] = a[q][q1];

       //перемещение значений снизу
       for (q = n + (v - n) / 2; q < v; q++)
           for (q1 = 0; q1 < v; q1++)
               if (a[q][q1] != 0)
                   a[q - n][q1] = a[q][q1];

       //расстояние между значениями в таблице
       t1 = m;
       t = 2;
       while (t1 > 10) {
           t1 /= 10;
           t++;
       }
       if (t2 < t) t2 = t;

        //вывод таблицы 1
        cout << "\n\n";
        for (q = (v - n) / 2; q < v- (v - n) / 2; q++) {
            for (q1 = (v - n) / 2; q1 < v- (v - n) / 2; q1++) cout << setw(t2+1) << a[q][q1];
            cout << "\n";
        }

        for (q = 0; q < v; q++)
            free(a[q]);
        free(a);

        return 0;
    }

    //если квадрат 4n+2
    if (n / 4 != 0) {
        n1 =n/ 2;
        r1 = n1 / 2;
        v1 = n1 + 2 * r1;

        //двумерный массив aa
        int** aa = (int**)malloc(v1 * sizeof(int*));
        for (q = 0; q < v1; q++)
            aa[q] = (int*)malloc(v1 * sizeof(int));

        //двумерный массив bb
        int** bb = (int**)malloc(v1 * sizeof(int*));
        for (q = 0; q < v1; q++)
            bb[q] = (int*)malloc(v1 * sizeof(int));

        //двумерный массив cc 
        int** cc = (int**)malloc(v1 * sizeof(int*));
        for (q = 0; q < v1; q++)
            cc[q] = (int*)malloc(v1 * sizeof(int));

        //двумерный массив dd
        int** dd = (int**)malloc(v1 * sizeof(int*));
        for (q = 0; q < v1; q++)
            dd[q] = (int*)malloc(v1 * sizeof(int));
        //////////////////////////////////////////////////////////////////////////
        //ввод 0 в массив 1
        for (q = 0; q < v1; q++)
            for (q1 = 0; q1 < v1; q1++) {
                aa[q][q1] = 0;
            }
        //ввод 0 в массив 2
        for (q = 0; q < v1; q++)
            for (q1 = 0; q1 < v1; q1++) {
                bb[q][q1] = 0;
            }
        //ввод 0 в массив 3
        for (q = 0; q < v1; q++)
            for (q1 = 0; q1 < v1; q1++) {
                cc[q][q1] = 0;
            }
        //ввод 0 в массив 4
        for (q = 0; q < v1; q++)
            for (q1 = 0; q1 < v1; q1++) {
                dd[q][q1] = 0;
            }
        //////////////////////////////////////////////////////////////////////////
        m = 1;
        s = 0;
        q1_ = 0;
        q_ = v1 / 2;

        //ввод значений в массив. Квадрат 45 градусов
        for (q = q_, q1 = q1_; q < v1 && q >= 0 && q1 < v1 && q1 >= 0; q--, q1++) {
            aa[q][q1] = m;
            s++;
            if (s == n1) {
                s = 0;
                q1_++;
                q_++;
                q = q_ + 1;
                q1 = q1_ - 1;
            }
            m++;
        }

        //перемещение значений сверху
        for (q = 0; q < r1; q++)
            for (q1 = 0; q1 < v1; q1++)
                if (aa[q][q1] != 0)
                    aa[q + n1][q1] = aa[q][q1];

        //перемещение значений снизу
        for (q = n1 + r1; q < v1; q++)
            for (q1 = 0; q1 < v1; q1++)
                if (aa[q][q1] != 0)
                    aa[q - n1][q1] = aa[q][q1];

        //перемещение значений справа
        for (q = 0; q < v1; q++)
            for (q1 = 0; q1 < r1; q1++)
                if (aa[q][q1] != 0)
                    aa[q][q1 + n1] = aa[q][q1];

        //перемещение значений слева
        for (q = 0; q < v1; q++)
            for (q1 = n1 + r1; q1 < v1; q1++)
                if (aa[q][q1] != 0)
                    aa[q][q1 - n1] = aa[q][q1];
        ////////////////////////////////////////////////////////////////////////
        s = 0;
        q1_ = 0;
        q_ = v1 / 2;

        //ввод значений в массив. Квадрат 45 градусов
        for (q = q_, q1 = q1_; q < v1 && q >= 0 && q1 < v1 && q1 >= 0; q--, q1++) {
            dd[q][q1] = m;
            s++;
            if (s == n1) {
                s = 0;
                q1_++;
                q_++;
                q = q_ + 1;
                q1 = q1_ - 1;
            }
            m++;
        }

        //перемещение значений сверху
        for (q = 0; q < r1; q++)
            for (q1 = 0; q1 < v1; q1++)
                if (dd[q][q1] != 0)
                    dd[q + n1][q1] = dd[q][q1];

        //перемещение значений снизу
        for (q = n1 + r1; q < v1; q++)
            for (q1 = 0; q1 < v1; q1++)
                if (dd[q][q1] != 0)
                    dd[q - n1][q1] = dd[q][q1];

        //перемещение значений справа
        for (q = 0; q < v1; q++)
            for (q1 = 0; q1 < r1; q1++)
                if (dd[q][q1] != 0)
                    dd[q][q1 + n1] = dd[q][q1];

        //перемещение значений слева
        for (q = 0; q < v1; q++)
            for (q1 = n1 + r1; q1 < v1; q1++)
                if (dd[q][q1] != 0)
                    dd[q][q1 - n1] = dd[q][q1];
        ///////////////////////////////////////////////////////////////
        s = 0;
        q1_ = 0;
        q_ = v1 / 2;

        //ввод значений в массив. Квадрат 45 градусов
        for (q = q_, q1 = q1_; q < v1 && q >= 0 && q1 < v1 && q1 >= 0; q--, q1++) {
            bb[q][q1] = m;
            s++;
            if (s == n1) {
                s = 0;
                q1_++;
                q_++;
                q = q_ + 1;
                q1 = q1_ - 1;
            }
            m++;
        }

        //перемещение значений сверху
        for (q = 0; q < r1; q++)
            for (q1 = 0; q1 < v1; q1++)
                if (bb[q][q1] != 0)
                    bb[q + n1][q1] = bb[q][q1];

        //перемещение значений снизу
        for (q = n1 + r1; q < v1; q++)
            for (q1 = 0; q1 < v1; q1++)
                if (bb[q][q1] != 0)
                    bb[q - n1][q1] = bb[q][q1];

        //перемещение значений справа
        for (q = 0; q < v1; q++)
            for (q1 = 0; q1 < r1; q1++)
                if (bb[q][q1] != 0)
                    bb[q][q1 + n1] = bb[q][q1];

        //перемещение значений слева
        for (q = 0; q < v1; q++)
            for (q1 = n1 + r1; q1 < v1; q1++)
                if (bb[q][q1] != 0)
                    bb[q][q1 - n1] = bb[q][q1];
        /////////////////////////////////////////////////////////////////////////
        s = 0;
        q1_ = 0;
        q_ = v1 / 2;

        //ввод значений в массив. Квадрат 45 градусов
        for (q = q_, q1 = q1_; q < v1 && q >= 0 && q1 < v1 && q1 >= 0; q--, q1++) {
            cc[q][q1] = m;
            s++;
            if (s == n1) {
                s = 0;
                q1_++;
                q_++;
                q = q_ + 1;
                q1 = q1_ - 1;
            }
            m++;
        }

        //перемещение значений сверху
        for (q = 0; q < r1; q++)
            for (q1 = 0; q1 < v1; q1++)
                if (cc[q][q1] != 0)
                    cc[q + n1][q1] = cc[q][q1];

        //перемещение значений снизу
        for (q = n1 + r1; q < v1; q++)
            for (q1 = 0; q1 < v1; q1++)
                if (cc[q][q1] != 0)
                    cc[q - n1][q1] = cc[q][q1];

        //перемещение значений справа
        for (q = 0; q < v1; q++)
            for (q1 = 0; q1 < r1; q1++)
                if (cc[q][q1] != 0)
                    cc[q][q1 + n1] = cc[q][q1];

        //перемещение значений слева
        for (q = 0; q < v1; q++)
            for (q1 = n1 + r1; q1 < v1; q1++)
                if (cc[q][q1] != 0)
                    cc[q][q1 - n1] = cc[q][q1];

        //менять местами
        for (q = r1; q < v1 - r1; q++)
            for (q1 = r1; q1 < 2*r1; q1++)
                swap(aa[q][q1], cc[q][q1]);
        swap(aa[n1-r1][n1-r1], cc[n1-r1][n1-r1]);
        
        if (n1 / 2 - 1 != 0)
            for (q = r1; q < v1 - r1; q++)
                for (q1 = r1+n1; q1 > r1 + n1 - n1 / 2 ; q1--)
                    swap(bb[q][q1], dd[q][q1]);
                    
        //расстояние между значениями в таблице
        t1 = m;
        t = 2;
        while (t1 > 10) {
            t1 /= 10;
            t++;
        }
        if (t2 < t) t2 = t;

        //вывод таблицы 1
        cout << "\n\n";
        for (q = r1; q < (v1 - r1); q++) {
            for (q1 = r1; q1 < v1 - r1; q1++) cout << setw(t2+1) << aa[q][q1];
            for (q1 = r1; q1 < v1 - r1; q1++) cout << setw(t2+1) << bb[q][q1];
            cout << "\n";
        }
        for (q = r1; q < (v1 - r1); q++) {
            for (q1 = r1; q1 < v1 - r1; q1++) cout << setw(t2+1) << cc[q][q1];
            for (q1 = r1; q1 < v1 - r1; q1++) cout << setw(t2+1) << dd[q][q1];
            cout << "\n";
        }

        for (q = 0; q < v1; q++)
            free(aa[q]);
        free(aa);

        for (q = 0; q < v1; q++)
            free(bb[q]);
        free(bb);

        for (q = 0; q < v1; q++)
            free(cc[q]);
        free(cc);

        for (q = 0; q < v1; q++)
            free(dd[q]);
        free(dd);

        for (q = 0; q < v; q++)
            free(a[q]);
        free(a);

        return 0;
    }
}