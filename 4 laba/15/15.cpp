//Лабораторная 4, задача 15. Выполнена: Климкович Н. В.

/*Таблица заполняется по следующему алгоритму:
В таблицу вносятся все натуральные числа по порядку. 1 становится в левую
верхнюю ячейку, затем выбирается самая левая незаполненная ячейка в
самой первой строке таблицы и заполняется. Затем, пока у последней
заполненной ячейки сосед слева существует и заполнен, опускаемся вниз и
заполняем очередную ячейку. Когда же не окажется соседа слева, то
начинается заполнение клеток справа налево. После того как будет заполнена
ячейка в первом столбце, После этого алгоритм заполнения повторятся.
Необходимо вывести строку и столбец в котором будет находится число,
введенное с клавиатуры.*/

#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int t1, t, t2, N, q, q1, m, q_, _q, _q1, q1_, qq, qq1, N1;
    cout << "NxM:\n N = ";
    cin >> N;
    while (N < 2  || cin.fail()) {
        cin.clear();
        cin.ignore(9999, '\n');
        cout << "\nIncorrect value, N = ";
        cin >> N;
    }
    N1 = N;
    N = sqrt(N) + 2;
    t2 = 1;
    m = 2;

    //двумерный массив 1
    int** a = new int* [N];
    for (q = 0; q < N; q++)
        a[q] = new int[N];

    //ввод значений в массив
    for (q = 0; q < N; q++)
        for (q1 = 0; q1 < N; q1++) {
            a[q][q1] = 0;
        }

    a[0][0] = 1;
    for (q = 0; q < N-1; q++)
        for (q1 = 1; q1 < N-1; q1++) {
            if (a[q][q1 - 1] != 0 && a[q + 1][q1] == 0) {
                for (_q = q; a[_q][q1 - 1] != 0; _q++) {
                    a[_q][q1] = m;
                    if (m == N1) {
                        cout << "\n[" << _q << "][" << q1 << "]";
                        //вывод таблицы 
                        cout << "\n\n";
                        for (q = 0; q < N; q++) {
                            for (q1 = 0; q1 < N; q1++) cout << setw(3) << a[q][q1];
                            cout << "\n";
                        }
                        return 0;
                    }
                    m++;
                }
                
                for (_q1 = q1; _q1 >= 0; _q1--) {
                    a[_q][_q1] = m;
                    if (m == N1) {
                        cout << "\n[" << _q << "][" << _q1 << "]";
                        //вывод таблицы 
                        cout << "\n\n";
                        for (qq = 0; qq < N; qq++) {
                            for (qq1 = 0; qq1 < N; qq1++) cout << setw(3) << a[qq][qq1];
                            cout << "\n";
                        }
                        return 0;
                    }
                    m++;
                }
            }
        }
}